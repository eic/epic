image: eicweb.phy.anl.gov:4567/eic/juggler/juggler:latest

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "webide"'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_TAG'

default:
  before_script:
    - source .local/bin/env.sh
  artifacts:
    expire_in: 1 week
    paths:
      - .local/detector
      - .local/lib
      - .local/bin
      - .local/include
      - .local/share
      - results
      - config
      - images
      - doc
      - juggler.env
      - geo
    reports:
      dotenv: juggler.env

stages:
  - config
  - build
  - test
  - docs
  - collect
  - finalize
  - deploy

common:setup:
  stage: config
  rules:
    - if: '$CI_SERVER_HOST == "eicweb.phy.anl.gov"'
  before_script:
    - git clone https://eicweb.phy.anl.gov/EIC/benchmarks/common_bench.git setup
  script:
    - |
      #      if [[ "x${CI_PIPELINE_SOURCE}" == "xmerge_request_event"  || "$CI_COMMIT_BRANCH" == "main" ]]; then
        export JUGGLER_DETECTOR_VERSION="${CI_COMMIT_REF_NAME}"
        echo "BEAMLINE_CONFIG          = ${BEAMLINE_CONFIG}"
        echo "BEAMLINE_CONFIG_VERSION  = ${BEAMLINE_CONFIG_VERSION}"
        echo "JUGGLER_DETECTOR         = ${JUGGLER_DETECTOR}"
        echo "JUGGLER_DETECTOR_VERSION = ${CI_COMMIT_REF_NAME}"
        echo "JUGGLER_DETECTOR_VERSION=$CI_COMMIT_REF_NAME" >> juggler.env
        echo "JUGGLER_DETECTOR=$JUGGLER_DETECTOR" >> juggler.env
        # as long as this repo is private, we need to use a deploy token to git clone it in CI
        echo "JUGGLER_DETECTOR_DEPLOY_TOKEN_USERNAME=${DEPLOY_TOKEN_USERNAME}" >> juggler.env
        echo "JUGGLER_DETECTOR_DEPLOY_TOKEN_PASSWORD=${DEPLOY_TOKEN_PASSWORD}" >> juggler.env
        #fi
    - source setup/bin/env.sh && ./setup/bin/install_common.sh

common:detector:
  stage: build
  needs:
    - common:setup
  script:
    - build_detector.sh
    - mkdir -p results
    - mkdir -p config
    - mkdir -p doc
    - mkdir -p geo
    - print_env.sh

build:simple:
  stage: build
  script:
    - mkdir -p build && cd build && cmake ../. -DCMAKE_INSTALL_PREFIX=/usr/local && make -j20 && make install  && cd ..
    - echo "Build successful."


.views:
  stage: docs
  tags:
    - phy-scratch
  before_script:
    - source .local/bin/env.sh
    - env
    - pip3 install psutil
  needs:
    - ["common:detector"]

include:
  - local: 'views/generate_prim_files.yml'
  - local: 'views/view1.yml'
  - local: 'views/view2.yml'
  - local: 'views/view3.yml'
  - local: 'views/view6.yml'
  - local: 'views/view7.yml'
  - local: 'views/view11.yml'
  - local: 'views/view12.yml'
  - local: 'views/view13.yml'
  - local: 'views/view14.yml'
  - local: 'views/view15.yml'
  - local: 'views/view20.yml'

check_prefix:
  stage: test
  needs:
    - common:detector
  script:
    - |
      echo "checking detector type prefix equals ${JUGGLER_DETECTOR}"
      declares=`grep -r DECLARE_ src/ | grep -v ${JUGGLER_DETECTOR} || true`
      if [[ ! -z "${declares}" ]] ; then
        echo "${declares}" && false
      fi

dump_geometry:
  stage: test
  needs:
    - common:detector
  script:
    - mkdir -p geo
    - |
      geo_base_file="geo/detector_geo"
      dd_web_display --output ${geo_base_file}.root ${DETECTOR_PATH}/${CI_PROJECT_NAME}.xml
      for yml in ${DETECTOR_PATH}/configurations/*.yml; do
        name=`basename $yml .yml`
        xml_file=${CI_PROJECT_NAME}_${name}.xml
        geo_file=${geo_base_file}_${name}.root
        dd_web_display --output ${geo_file} ${DETECTOR_PATH}/${xml_file}
      done
    - |
      geoviewer="https://eic.phy.anl.gov/geoviewer/index.htm"
      geo_base_url="${CI_PROJECT_URL}/-/jobs/${CI_JOB_ID}/artifacts/raw/${geo_base_file}"
      geo_suffix="?job=${CI_JOB_NAME}&item=default;1&opt=clipx;clipy;transp30;zoom75;ROTY320;ROTZ340;trz0;trr0;ctrl;all"
      echo " - Default subsystem view at:"
      echo "   ${geoviewer}?file=${geo_base_url}.root${geo_suffix}"
      for yml in ${DETECTOR_PATH}/configurations/*.yml; do
        name=`basename $yml .yml`
        xml_file=${CI_PROJECT_NAME}_${name}.xml
        geo_url=${geo_base_url}_${name}.root
        echo " - Subsystem view for ${xml_file} at:"
        echo "   ${geoviewer}?file=${geo_url}${geo_suffix}"
      done

detector_documentation:
  stage: docs
  needs:
    - common:detector
  script:
    - mkdir -p doc
    - bash bin/build_documentation | tee doc/detector.md
      #- |
      #  xmllint --format --xpath '//comment/text()' ${DETECTOR_PATH}/epic.xml | sed -re 's/<\/?\w+>//g' | sed 's/^[[:space:]]*#/#/' | tee  doc/detector.md
      #  xmllint --format --xpath '//comment/text()' ${DETECTOR_PATH}/ip6/definitions.xml | sed -re 's/<\/?\w+>//g' | sed 's/^[[:space:]]*#/#/' | tee -a doc/detector.md || true
      #  for afile in ${DETECTOR_PATH}/compact/*.xml ; do
      #    xmllint --format --xpath '//comment/text()' ${afile} | sed -re 's/<\/?\w+>//g' | sed 's/^[[:space:]]*#/#/' | tee -a doc/detector.md || true
      #  done

report:
  stage: finalize
  needs:
    - view_01
    - view_02
    - view_03
    - view_06
    - view_07
    - view_11
    - view_12
    - view_13
    - view_14
    - view_15
    - view_20
    - dump_constants
    - dump_geometry
    - dump_parameter_table
    - convert_to_gdml
  script:
    - pip3 install jinja2 &&  ls -lrth
    - ./bin/make_images > doc/dawn_views.md
    - echo "Geometry viewer at https://eic.phy.anl.gov/geoviewer/index.htm?file=https://eicweb.phy.anl.gov/EIC/detectors/ecce/-/jobs/${CI_JOB_ID}/artifacts/raw/geo/detector_geo_full.root?job=finalize&item=default;1&opt=clipxyz;transp30;zoom75;ROTY290;ROTZ350;trz0;trr0;ctrl;all&"

dump_constants:
  stage: test
  needs:
    - ["common:detector"]
  script:
    - npdet_info dump ${DETECTOR_PATH}/epic.xml | tee doc/constants.out

dump_parameter_table:
  stage: test
  needs:
    - ["common:detector"]
  script:
    - npdet_info dump ${DETECTOR_PATH}/epic.xml | grep -v '^\s' | grep '=' | cut -d= -f1-2 | tee doc/constants.toml
    - python bin/make_detector_parameter_table

overlap_check_tgeo:
  stage: test
  needs:
    - ["common:detector"]
  script:
    ## disable fibers in ECAL for normal overlap check
    - sed -i '/<fiber/,+6d' ${DETECTOR_PATH}/compact/ecal_barrel_interlayers.xml
    - sed -i '/<fiber/,+4d' ${DETECTOR_PATH}/ip6/far_forward/ZDC_Ecal_WSciFi.xml
    - checkOverlaps -c ${DETECTOR_PATH}/epic.xml  | tee doc/overlap_check_tgeo.out
    - echo "$(cat doc/overlap_check_tgeo.out | grep ovlp | wc -l) overlaps..."
    - if [[ "$(cat doc/overlap_check_tgeo.out | grep ovlp | wc -l)" -gt "0" ]] ; then echo "Overlaps exist!" && false ; fi

overlap_check_geant4:full_fast:
  stage: test
  needs:
    - ["common:detector"]
  script:
    ## disable fibers in ECAL for normal overlap check
    - sed -i '/<fiber/,+6d' ${DETECTOR_PATH}/compact/ecal_barrel_interlayers.xml
    - sed -i '/<fiber/,+4d' ${DETECTOR_PATH}/ip6/far_forward/ZDC_Ecal_WSciFi.xml
    ## reduce the number of fibers in Hadron EMCal for overlap check
    ## not needed, as we are running with a different setup now
    #- sed -i 's/radius="EcalEndcapP_FiberRadius"/radius="EcalEndcapP_FiberRadius*10"/' ${DETECTOR_PATH}/compact/ci_ecal_scfi.xml
    - python scripts/checkOverlaps.py -c ${DETECTOR_PATH}/epic.xml | tee doc/overlap_check_geant4.out
    - echo "$(cat doc/overlap_check_geant4.out | grep GeomVol1002 | wc -l) overlaps..."
    - if [[ "$(cat doc/overlap_check_geant4.out | grep GeomVol1002 | wc -l)" -gt "0" ]] ; then echo "Overlaps exist!" && false ; fi

## TODO: add real full overlap check as child pipeline to run on branches only

overlap_check_geant4:inner_detector:
  stage: test
  needs:
    - ["common:detector"]
  script:
    - python scripts/checkOverlaps.py -c ${DETECTOR_PATH}/epic_inner_detector.xml | tee doc/overlap_check_geant4.out
    - echo "$(cat doc/overlap_check_geant4.out | grep GeomVol1002 | wc -l) overlaps..."
    - if [[ "$(cat doc/overlap_check_geant4.out | grep GeomVol1002 | wc -l)" -gt "0" ]] ; then echo "Overlaps exist!" && false ; fi

convert_to_gdml:
  stage: test
  needs:
    - ["common:detector"]
  script:
    - mkdir -p geo
    - python scripts/convert_to_gdml.py --compact ${DETECTOR_PATH}/epic.xml --output geo/epic.gdml

tracking_geometry_debug:
  stage: test
  needs:
    - ["common:detector"]
  script:
    - root -b -q "scripts/test_ACTS.cxx+(\"${DETECTOR_PATH}/epic.xml\")" | tee geo/tracking_geometry_debug.out
    - ./bin/acts_geo_check geo/tracking_geometry_debug.out

detector:config_testing:
  stage: test
  needs:
    - ["common:detector"]
  script:
    - checkOverlaps -o 's' -c ${DETECTOR_PATH}/epic.xml  | tee doc/overlap_check.out | wc -l
    - cat doc/overlap_check.out

benchmarks:detector:
  stage: deploy
  variables:
    JUGGLER_DETECTOR: "$JUGGLER_DETECTOR"
    JUGGLER_DETECTOR_VERSION: "$JUGGLER_DETECTOR_VERSION"
    JUGGLER_DETECTOR_DEPLOY_TOKEN_USERNAME: "$DEPLOY_TOKEN_USERNAME"
    JUGGLER_DETECTOR_DEPLOY_TOKEN_PASSWORD: "$DEPLOY_TOKEN_PASSWORD"
  trigger:
    project: EIC/benchmarks/detector_benchmarks
    strategy: depend
  needs:
    - overlap_check_geant4:full_fast
    - common:detector
  parallel:
    matrix:
      - JUGGLER_DETECTOR_CONFIG:
        - "${JUGGLER_DETECTOR}"
        - "${JUGGLER_DETECTOR}_imaging"
