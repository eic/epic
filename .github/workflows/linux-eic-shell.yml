name: linux-eic-shell

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  workflow_dispatch:
    inputs:
      github_repository:
        description: 'Submitting GitHub repository'
        required: false
        default: ''
        type: string
      github_sha:
        description: 'Submitting GitHub sha'
        required: false
        default: ''
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  xmllint-before-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-utils
        find compact/ -name "*.xml" -exec xmllint {} \; > /dev/null

  build-gcc:
    runs-on: ubuntu-latest
    needs: xmllint-before-build
    env:
      PREFIX: ${{ github.workspace }}/install
    steps:
    - uses: actions/checkout@v3
    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      run: |
        echo "timestamp=$(date --iso-8601=minutes)" >> $GITHUB_OUTPUT
    - name: Retrieve ccache cache files
      uses: actions/cache@v3
      with:
        path: .ccache
        key: ccache-${{ github.ref_name }}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
             ccache-${{ github.ref_name }}-
             ccache-
    - name: Configure ccache
      run: |
        mkdir -p ~/.ccache/
        echo "cache_dir=${{ github.workspace }}/.ccache" >> ~/.ccache/ccache.conf
        echo "max_size=500MB" >> ~/.ccache/ccache.conf
        echo "compression=true" >> ~/.ccache/ccache.conf
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - name: Setup CVMFS OSG eic-shell environment
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        run: |
          eic-info
    - name: Build detector geometry
      uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        run: |
          CC=gcc CXX=g++ cmake -B build -S . -DCMAKE_INSTALL_PREFIX=${PREFIX} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          cmake --build build -- -j 2 install
    - uses: actions/upload-artifact@v3
      with:
        name: build-gcc-full-eic-shell
        path: install/
        if-no-files-found: error
    - run: |
        source install/setup.sh
        sed -i '/<fiber/,+6d' ${DETECTOR_PATH}/compact/ecal/barrel_interlayers.xml
        sed -i '/<fiber/,+4d' ${DETECTOR_PATH}/compact/ecal/forward_scfi.xml
        sed -i '/<fiber/,+4d' ${DETECTOR_PATH}/compact/far_forward/ZDC_Ecal_WSciFi.xml
        sed -i '/<lens/,+4d' ${DETECTOR_PATH}/compact/pid/mrich.xml
    - uses: actions/upload-artifact@v3
      with:
        name: build-gcc-fast-eic-shell
        path: install/
        if-no-files-found: error

  convert-to-gdml:
    runs-on: ubuntu-latest
    needs: build-gcc
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: build-gcc-full-eic-shell
        path: install/
    - uses: cvmfs-contrib/github-action-cvmfs@v3
    - uses: eic/run-cvmfs-osg-eic-shell@main
      with:
        platform-release: "jug_xl:nightly"
        network_types: "none"
        setup: install/setup.sh
        run: |
          mkdir -p geo
          LD_DEBUG=all python scripts/convert_to_gdml.py --compact ${DETECTOR_PATH}/${DETECTOR}.xml --output geo/${DETECTOR}.gdml
    - uses: actions/upload-artifact@v3
      with:
        name: epic.gdml
        path: geo/
        if-no-files-found: error
