#!/usr/bin/env python3

# SPDX-License-Identifier: LGPL-3.0-or-later
# Copyright (C) 2023 Chao Peng
'''
    A script to compare two detector parameter tables.
    Report inconsistent numbers, missing components/columns, or other errors.
'''

import os
import argparse
import pandas as pd

pd.set_option('display.max_rows', 500)


# read parameter table and do a little bit formatting
def read_par_table(path, **kwargs):
    dft = pd.read_csv(path, **kwargs)
    dft.columns = [i.replace(' \n', ' ').replace('\n', ' ').strip() for i in dft.columns.astype(str)]
    unnamed_cols = [i for i in dft.columns if i.startswith('Unnamed')]
    dft = dft.drop(columns=unnamed_cols)
    for col in dft.columns:
        if pd.api.types.is_string_dtype(dft[col].dtype):
            dft.loc[:, col] = dft[col].str.replace(' \n', ' ').str.replace('\n', ' ').str.strip()
    dft.loc[:, 'Region'] = dft['Region'].fillna(method='ffill')
    dft.loc[:, 'Component'] = dft['Component'].fillna(method='ffill')
    dft.loc[:, 'Sub-Component'] = dft['Sub-Component'].fillna('')
    # build a key (multi-indexing also works)
    comp = dft['Region'] + '_' + dft['Component']
    sub_comp = dft['Sub-Component'].copy()
    sub_comp.loc[sub_comp.str.len() > 0] = '_' + sub_comp.astype(str)
    dft.loc[:, 'key'] = (comp + sub_comp).str.replace(' ', '_').str.lower()
    return dft.set_index('key', drop=True)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
            prog='compare_detector_parameter_table',
            description = 'A python script to compare two detector parameter tables.'
                        + '\n       ' # 7 spaces for "usage: "
                        + r'It adapts the format as of 2023/10 (see https://eic.jlab.org/Menagerie).'
            )
    parser.add_argument(
            'det_table',
            help='Path or url to the DETECTOR parameter table.'
            )
    parser.add_argument(
            'sim_table',
            help='Path or url to the SIMULATION parameter table.'
            )
    parser.add_argument(
            '--det-encoding', default='ISO-8859-1',
            help='encoding for the detector parameter table'
            )
    parser.add_argument(
            '--sim-encoding', default='ISO-8859-1',
            help='encoding for the simulation parameter table'
            )
    args = parser.parse_args()

    dfd = read_par_table(args.det_table, encoding=args.det_encoding)
    # ignore alternatives
    dfd = dfd[~dfd['Region'].str.contains('ALTERNATIVE')]
    print(dfd)
    dfs = read_par_table(args.sim_table, encoding=args.sim_encoding)
    print(dfs)
