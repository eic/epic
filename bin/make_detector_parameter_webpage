#!/usr/bin/env ruby
# convert the detector parameter table to a human-readable webpage

require 'csv'

# arguments
csvFile   = ARGV.length>=1 ? ARGV[0] : 'doc/DetectorParameterTable.csv'
htmlFile  = ARGV.length>=2 ? ARGV[1] : csvFile.gsub(/csv$/, 'html')

# start the html file; CSS
html = File.open htmlFile, 'w'
html.puts '''
<html>
<head>
<title>Detector Parameter Table</title>
<style>
.tableFixedHead {
  overflow-y: auto;
  height: 100%;
}
.tableFixedHead thead th {
  position: sticky;
  top: 0;
}
table {
  width: 100%;
  border-collapse: collapse;
}
th {
  background: #AAAAAA;
}
th, td {
  text-align: left;
  padding: 8px;
  white-space: nowrap;
  border: 1px solid gray;
}
tr:nth-child(even) {
  background-color: #EAEAEA;
}
td:nth-child(1), td:nth-child(2) {
  background-color: #AAAAAA;
  font-weight: bold;
}
</style>
</head>
<body>
<div class="tableFixedHead">
<table>
'''

# loop over CSV rows
ncols = 0
CSV.foreach(csvFile).with_index do |row,r|
  # check number of columns
  ncols = row.size unless ncols>0
  $stderr.puts "WARNING: row '#{row[0..2].join(', ')}, ...' has unexpected number of columns" if row.size!=ncols
  # start the html row
  html.puts '<thead>' if r==0
  html.puts '<tbody>' if r==1
  html.puts '<tr>'
  # loop over cells, re-formatting some of them
  row.each_with_index do |cell,c|
    cellF = cell.nil? ? '' :
      cell.gsub(/\n/, '<br />')
    t = r==0 ? 'th' : 'td'
    html.puts "<#{t}>#{cellF}</#{t}>"
  end
  # end the html row
  html.puts '</tr>'
  html.puts '</thead>' if r==0
end

# end the html file
html.puts '''
</tbody>
</table>
</div>
</body>
</html>
'''
html.close
puts " -> wrote #{htmlFile}"
